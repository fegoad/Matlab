Relational operators:

> greater than
< less than
>= greater than or equals
<= less than or equals
== equality
~= inequality


Logical operators:

|| ir(for scalars)
&& and(for scalars)
~ not 

~x swaps the content of the value inside x

>> 1>3
ans =
     0
>> 1<3
ans =
     1
>> whos
  Name      Size            Bytes  Class      Attributes

  a         1x1                 1  logical              
  ans       1x1                 1  logical              
  b         1x1                 1  logical              

>> a==5
ans =
     0
>> a=5
a =
     5
>> a==5
ans =
     1
>> a~=5
ans =
     0
>> a=logical(1)
a =
     1
>> b=logical(0)
b =
     0
>> b=false
b =
     0
>> a=true
a =
     1
>> a&&b
ans =
     0
>> %not true at the same time
>> a||b
ans =
     1
>> %trrue because at least one is true
>> d=0
d =
     0
>> c=0
c =
     0
>> c&&d
ans =
     0
     
>> ((aa>3)&&(bb==7))||(aa<-1) %wether than aa is bigger than 3 and at the same time bb 
% is bigger than 7. True, and false. So the first expression if alse. Or. Second
%expression is false. False or False.
ans =
     0     


exercices in class:
>> 3>5
ans =
     0
>> 3>5&&3<6
ans =
     0
>> 4>=3&&5<6
ans =
     1
>> 10~=10
ans =
     0
>> 1=='1'
ans =
     0
     
strcmp('asd','asd')
ans =
     1
>> 'asd'=='asd'
ans =
     1     1     1 %we use the first function because of this outcome.
     
isequal('asd','asd')
ans =
     1
     

%both methods strcmp and isequal:

>> a='asdf'
a =
asdf
>> strcmp(a,'qwer')||strcmp(a,'asd')
ans =
     0
>> a='asdf'
a =
asdf
>> a='asdf';
>> isequal(a,'qwer')||isequal(a,'asd')
ans =
     0
>> 


>> a=3;
>> b=5;
>> c=9;
>> (a+b)>c&&(a+b)~=c+3
ans =
     0
     
>> xor(5>3,'a'~='a')
ans =
     1
     %because: xor(A,B) represents the logical exclusive disjunction. xor(A,B) 
     %is true when either A or B are true. If both A and B are true or false, xor(A,B) is false.
     
>> a=9
a =
     9
>> 1<=a<=3
ans =
     1
%what happens? This happens because of the way matlab parses the expression. Matlab works from left to
%right, evaluates this expression. so: 1<=a?? Yes, it is true. then, matlab says. is TRUE smaller
%or equal to 3?? The answer is Yes. 
%Matlab has transformed 1<=a into 1. then, of course it is smaller than 3. However, this is not the
%outcome we were expecting.
     
>>  a=[1 2 3];
>> b=[1 2 4];
>> c=[1 2 3];
>> a==b
ans =
     1     1     0
>> a==c
ans =
     1     1     1
>> isequal(a,b)
ans =
     0
>> isequal(a,c)
ans =
     1
>> 


%%%%%%%%%%%%%%%%%%%%%%%

%don't take for granted that a program that does not crash is working correctly. for example:
%50=='2' . This looks like false. However, it is true because matlab transforms the string '2' into
%its encoding which is 50, therefore matlab shows true.

%isequal for vectors and time structures
%strcmp use for strings (to avoid the problems previously commented)

%%%%%%%%%%%%%%%%%%%%%%
ORDER FLOW
%%%%%%%%%%%%%%%%%%%%%%

-------if-then:

if condition
         Statement(s)	
end

-------if-then-else:

if condition
     Statement(s) I	
else
S    tatements(s) II	
end

-------Nested if-then:

if condition I	
     if condition II	
          Statement(s)	
     end
end


if condition I	
     if condition II	
          Statement(s) II	
     else
          Statement(s) I	
     end
end
--------------

if Cond. I	
     if Cond. II	
           if Cond. III	
	 	     Stat. IV	
           else
               Stat. III
          end
     else 	
          Stat. II
     end
else
     Stat. I	
end


-------elseif

if Cond. I	
     Stat. I
else
     if Cond. II	
          Stat. II
     else
           if Cond. III	
	 	       Stat. III	
          else
               Stat. IV
          end
     end
end

------

if Condition I	
          Statement(s) I
elseif Condition II	
          Statement(s) II
elseif Condition III	
          Statement(s) III	
else
          Statement(s) IV
end


